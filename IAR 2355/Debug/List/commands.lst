###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           21/Mar/2021  15:31:48
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\darri\OneDrive\Desktop\Spring 2021\ECE 484\local Git
#        BP\Basestation_Protocol\commands.c
#    Command line  =  
#        -f C:\Users\darri\AppData\Local\Temp\EW9800.tmp
#        ("C:\Users\darri\OneDrive\Desktop\Spring 2021\ECE 484\local Git
#        BP\Basestation_Protocol\commands.c" -lC
#        "C:\Users\darri\OneDrive\Desktop\Spring 2021\ECE 484\local Git
#        BP\Basestation_Protocol\Debug\List" -o
#        "C:\Users\darri\OneDrive\Desktop\Spring 2021\ECE 484\local Git
#        BP\Basestation_Protocol\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FR2355__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\darri\OneDrive\Desktop\Spring 2021\ECE 484\local Git
#        BP\Basestation_Protocol\Debug\List\commands.lst
#    Object file   =  
#        C:\Users\darri\OneDrive\Desktop\Spring 2021\ECE 484\local Git
#        BP\Basestation_Protocol\Debug\Obj\commands.r43
#
###############################################################################

C:\Users\darri\OneDrive\Desktop\Spring 2021\ECE 484\local Git BP\Basestation_Protocol\commands.c
      1          #include  "functions.h"
      2          #include  "msp430.h"
      3          #include "macros.h"
      4          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
      5          float TARI = 12.5; 
   \                     TARI:
   \   000000                DS8 4
   \   000004                REQUIRE `?<Initializer for TARI>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
      6          float RTcal = 31.25; 
   \                     RTcal:
   \   000000                DS8 4
   \   000004                REQUIRE `?<Initializer for RTcal>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
      7          float TRcal = 34.5;
   \                     TRcal:
   \   000000                DS8 4
   \   000004                REQUIRE `?<Initializer for TRcal>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
      8          float PW = 6; 
   \                     PW:
   \   000000                DS8 4
   \   000004                REQUIRE `?<Initializer for PW>`
      9          

   \                                 In  segment CODE, align 2
     10          void preamble(float T,float RT,float TR,float P){
   \                     preamble:
     11            
     12            
     13          }
   \   000000   1001         RETA
     14          
     15          /*
     16          // 
     17          // Select command: 
     18          // Arguments: 4-bit command 
     19          void Select(int Target, int Action, int MemBank, int Truncate, int CRC_16){
     20            float command = Select_cmd;
     21            
     22            
     23            
     24          }
     25          
     26          // challenge command
     27          // Arguments: 2-bit RFU value (should be 00, if not then tag returns to ready)
     28          // 1- bit IncRepLen value (whether tags reply should include length y:1 n:0)
     29          // 1-bit Immed value: (whether tag should concatenate 
     30          void Challenge(int RFU, int IncRepLen, int Immed, int CSI, int length, int message, int CRC_16){
     31            int command = Challenge_cmd; 
     32            
     33            
     34            
     35          }
     36          */
     37          
     38          // QueryAdjust command
     39          // Arguments: session and UpDn
     40          // Session: confirms the session number for the inventory round given by Query 
     41          // UpDn: Determines how the value Q is adjusted, Q is the # of slots in an inventory round 

   \                                 In  segment CODE, align 2
     42          int QueryAdjust(int session, int UpDn){
   \                     QueryAdjust:
   \   000000   0F4C         MOV.W   R12, R15
     43          int command = QueryAdjust_cmd; 
   \   000002   3C400900     MOV.W   #0x9, R12
     44          command = command << 2; 
   \   000006   5C06         RLAM.W  #0x2, R12
     45          command |= session;
   \   000008   0CDF         BIS.W   R15, R12
     46          command = command << 3; 
   \   00000A   5C0A         RLAM.W  #0x3, R12
     47          command |= UpDn; 
   \   00000C   0CDD         BIS.W   R13, R12
     48          return command;   
   \   00000E   1001         RETA
     49          }
     50          
     51          
     52          
     53          // QueryRep command 
     54          // Arguments: session
     55          // session: same as QueryAdjust

   \                                 In  segment CODE, align 2
     56          int QueryRep(int session){
   \                     QueryRep:
   \   000000   0F4C         MOV.W   R12, R15
     57          int command = QueryRep_cmd; 
   \   000002   0C43         MOV.W   #0x0, R12
     58          command = command << 2; 
   \   000004   5C06         RLAM.W  #0x2, R12
     59          command |= session;
   \   000006   0CDF         BIS.W   R15, R12
     60          return command; 
   \   000008   1001         RETA
     61          }

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for TARI>`:
   \   000000   00004841     DC32 41480000H

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for RTcal>`:
   \   000000   0000FA41     DC32 41FA0000H

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for TRcal>`:
   \   000000   00000A42     DC32 420A0000H

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for PW>`:
   \   000000   0000C040     DC32 40C00000H

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   QueryAdjust
      4   QueryRep
      4   preamble


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for PW>
       4  ?<Initializer for RTcal>
       4  ?<Initializer for TARI>
       4  ?<Initializer for TRcal>
       4  PW
      16  QueryAdjust
      10  QueryRep
       4  RTcal
       4  TARI
       4  TRcal
       2  preamble

 
 28 bytes in segment CODE
 16 bytes in segment DATA16_I
 16 bytes in segment DATA16_ID
 
 28 bytes of CODE  memory
 16 bytes of CONST memory
 16 bytes of DATA  memory

Errors: none
Warnings: none
