###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           21/Mar/2021  15:31:49
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\darri\OneDrive\Desktop\Spring 2021\ECE 484\local Git
#        BP\Basestation_Protocol\main.c
#    Command line  =  
#        -f C:\Users\darri\AppData\Local\Temp\EW990D.tmp
#        ("C:\Users\darri\OneDrive\Desktop\Spring 2021\ECE 484\local Git
#        BP\Basestation_Protocol\main.c" -lC
#        "C:\Users\darri\OneDrive\Desktop\Spring 2021\ECE 484\local Git
#        BP\Basestation_Protocol\Debug\List" -o
#        "C:\Users\darri\OneDrive\Desktop\Spring 2021\ECE 484\local Git
#        BP\Basestation_Protocol\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FR2355__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\darri\OneDrive\Desktop\Spring 2021\ECE 484\local Git
#        BP\Basestation_Protocol\Debug\List\main.lst
#    Object file   =  
#        C:\Users\darri\OneDrive\Desktop\Spring 2021\ECE 484\local Git
#        BP\Basestation_Protocol\Debug\Obj\main.r43
#
###############################################################################

C:\Users\darri\OneDrive\Desktop\Spring 2021\ECE 484\local Git BP\Basestation_Protocol\main.c
      1          #include  "functions.h"
      2          #include  "msp430.h"
      3          #include "macros.h"
      4          #include <string.h>
      5          // other variables 

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
      6          char message[] = "Confirmed Received Message: " ; 
   \                     message:
   \   000000                DS8 29
   \   00001D                REQUIRE `?<Initializer for message>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      7          extern int location = 0; 
   \                     location:
   \   000000                DS8 2
      8          extern char holding[32];

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
      9          char waiting[] = "Waiting for Response... " ; 
   \                     waiting:
   \   000000                DS8 25
   \   000019                REQUIRE `?<Initializer for waiting>`
     10          
     11          //timers 
     12          extern volatile unsigned short int Time_Sequence;
     13          extern unsigned short int wait2send; 
     14          
     15          //flags 

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     16          extern unsigned short int sendData = 1;
   \                     sendData:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for sendData>`
     17          extern unsigned short int start; 
     18          extern unsigned short int transmit; 
     19          extern unsigned short int msgReceived;
     20          extern unsigned short int y; 
     21          

   \                                 In  segment CODE, align 2
     22          void main(void){
   \                     main:
     23          Init_All(); 
   \   000000   ........     CALLA   #Init_All
     24          
     25            while(ALWAYS) { 
     26             // toggleLEDs(); 
     27              switch(sendData){
   \                     ??main_0:
   \   000004   1F42....     MOV.W   &sendData, R15
   \   000008   1F83         SUB.W   #0x1, R15
   \   00000A   0524         JEQ     ??main_3
   \   00000C   1F83         SUB.W   #0x1, R15
   \   00000E   1E24         JEQ     ??main_4
   \   000010   1F83         SUB.W   #0x1, R15
   \   000012   2624         JEQ     ??main_5
   \   000014   F73F         JMP     ??main_0
     28              case 1: 
     29                if(y){
   \                     ??main_3:
   \   000016   8293....     CMP.W   #0x0, &y
   \   00001A   1324         JEQ     ??main_6
     30                  tx_cmd((int *)convert(QueryAdjust(0x01,0x01))); 
   \   00001C   1D43         MOV.W   #0x1, R13
   \   00001E   1C43         MOV.W   #0x1, R12
   \   000020   ........     CALLA   #QueryAdjust
   \   000024   ........     CALLA   #convert
   \   000028   ........     CALLA   #tx_cmd
     31                  tx_cmd((int *)convert(QueryAdjust(0x01,0x01)));
   \   00002C   1D43         MOV.W   #0x1, R13
   \   00002E   1C43         MOV.W   #0x1, R12
   \   000030   ........     CALLA   #QueryAdjust
   \   000034   ........     CALLA   #convert
   \   000038   ........     CALLA   #tx_cmd
     32                   y = 0; 
   \   00003C   8243....     MOV.W   #0x0, &y
   \   000040   E13F         JMP     ??main_0
     33                }else{
     34                  tx_msg(waiting); 
   \                     ??main_6:
   \   000042   3C40....     MOV.W   #waiting, R12
   \   000046   ........     CALLA   #tx_msg
     35              }
     36               break; 
   \   00004A   DC3F         JMP     ??main_0
     37              case 2: 
     38                delay(0,&wait2send,&sendData,3); 
   \                     ??main_4:
   \   00004C   3F400300     MOV.W   #0x3, R15
   \   000050   3E40....     MOV.W   #sendData, R14
   \   000054   3D40....     MOV.W   #wait2send, R13
   \   000058   0C43         MOV.W   #0x0, R12
   \   00005A   ........     CALLA   #delay
     39                break; 
   \   00005E   D23F         JMP     ??main_0
     40              case 3: 
     41                rx(); 
   \                     ??main_5:
   \   000060   ........     CALLA   #rx
     42                break; 
   \   000064   CF3F         JMP     ??main_0
   \   000066   0343         NOP
     43              default: 
     44                break; 
     45              }
     46            } 
     47          }

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for message>`:
   \   000000   436F6E666972 DC8 "Confirmed Received Message: "
   \            6D6564205265
   \            636569766564
   \            204D65737361
   \            67653A2000  

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for waiting>`:
   \   000000   57616974696E DC8 "Waiting for Response... "
   \            6720666F7220
   \            526573706F6E
   \            73652E2E2E20
   \            00          

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for sendData>`:
   \   000000   0100         DC16 1
     48          
     49          
     50            
     51          
     52          
     53          
     54          
     55          
     56          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Init_All
        4   -> QueryAdjust
        4   -> convert
        4   -> delay
        4   -> rx
        4   -> tx_cmd
        4   -> tx_msg


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      29  ?<Initializer for message>
       2  ?<Initializer for sendData>
      25  ?<Initializer for waiting>
       2  location
     104  main
      29  message
       2  sendData
      25  waiting

 
 104 bytes in segment CODE
  56 bytes in segment DATA16_I
  56 bytes in segment DATA16_ID
   2 bytes in segment DATA16_Z
 
 104 bytes of CODE  memory
  56 bytes of CONST memory
  58 bytes of DATA  memory

Errors: none
Warnings: none
